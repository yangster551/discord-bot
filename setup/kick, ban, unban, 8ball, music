import discord
import random
from discord.ext import commands
#import youtube_dl
#import os

client = commands.Bot(command_prefix='.')

@client.command()


#gives the ping
@client.command()
async def ping(ctx): #ctx = context
    await ctx.send(f'pong {round(client.latency * 1000)}ms') #milliseconds

#repeats message
@client.command()
async def repeat(ctx, *args):
    for arg in args:
        await ctx.send(arg)

#server info
@client.command()
async def server(ctx):
    name = str(ctx.guild.name)
    description = str(ctx.guild.description)

    owner = str(ctx.guild.owner)
    id = str(ctx.guild.id)
    region = str(ctx.guild.region)

    memberCount = str(ctx.guild.member_count)
    created = str(ctx.guild.created_at)

    icon = str(ctx.guild.icon_url)

    embed = discord.Embed(
        title=name + " Server information",
        description=description,
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=icon)
    embed.add_field(name="Owner", value=owner, inline=True)
    embed.add_field(name="Server ID", value=id, inline=True)
    embed.add_field(name="Region", value=region, inline=True)
    embed.add_field(name="Member Count", value=memberCount, inline=True)
    embed.add_field(name="Created", value=created, inline=True)

    await ctx.send(embed=embed)

#kick
@client.command()
async def kick(ctx, member : discord.Member, *, reason = None):
    await member.kick(reason = reason)
    await ctx.send(f'Kicked {member.mention}')

#ban
@client.command()
async def ban(ctx, member : discord.Member, *, reason = None):
    await member.ban(reason = reason)
    await ctx.send(f'Banned {member.mention}')

#unban
@client.command()
async def unban(ctx, *, member):
    banned_users = await ctx.guild.bans()
    member_name, member_discriminator = member.split("#")

    for ban_entry in banned_users:
        user = ban_entry.user

        if (user.name, user.discriminator) == (member_name, member_discriminator):
            await ctx.guild.unban(user)
            await ctx.send(f'Unbanned {user.mention}')
            return

#8ball
@client.command(aliases = ['8ball', 'test'])
async def _8ball(ctx, *, question):
    responses = ['It is certain.',
                 'it is decidedly so.',
                 'without a doubt.',
                 'Yes - definitely.',
                 'you may rely on it.',
                 'As i see it, yes.',
                 'Most likely.',
                 'outlook good.',
                 'yes.',
                 'signs point to yes.',
                 'reply hazy, try again.',
                 'ask again later.',
                 'better not tell you now.',
                 'cant predict now.',
                 'concentrate and ask again.',
                 'dont count on it.',
                 'my reply is no.',
                 'my sources say no.',
                 'outlook not so good.',
                 'very doubtful.']
    await ctx.send(f'Question: {question}\nAnswer: {random.choice(responses)}')

#clears messages
@client.command()
async def clear(ctx, amount = 5):
    await ctx.channel.purge(limit = amount + 1)

#calling bot
@client.command()
async def memer(ctx):
    await ctx.send("sup")

#affection command
@client.command()
async def love(ctx):
    await ctx.send("I love you!")
"""
#music
@client.command()
async def play(ctx, url : str):
    voiceChannel = discord.utils.get(ctx.guild.voice_channels, name="General")
    voice = discord.utils.get(client.voice_clients, guild=ctx.guild)
    #make sure not connect twice
    if not voice.is_connected():
        await voiceChannel.connect()

#leaving vc
@client.command()
async def leave(ctx):
    voice = discord.utils.get(client.voice_clients, guild=ctx.guild)
    if voice.is_connected():
        await voice.disconnect()
    else:
        await ctx.send("Memer is not connected to a voice channel.")

#pausing music
@client.command()
async def pause(ctx):
    voice = discord.utils.get(client.voice_clients, guild=ctx.guild)
    if voice.is_playing():
        voice.pause()
    else:
        await ctx.send("No audio is playing.")

#resume
@client.command()
async def resume(ctx):
    voice = discord.utils.get(client.voice_clients, guild=ctx.guild)
    if voice.is_paused():
        voice.resume()
    else:
        await ctx.send("The audio is not paused.")

#stop music but stay in voice channel
@client.command()
async def stop(ctx):
    voice = discord.utils.get(client.voice_clients, guild=ctx.guild)
    voice.stop()
"""

client.run('ODA2MTYxOTYyOTMyMTA5MzYz.YBla1Q.3D9K3QL1IDq3VMToDNgroKhVnNY')
